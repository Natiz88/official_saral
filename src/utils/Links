import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { links } from "./LinkItems.js";
import { IoIosArrowForward } from "react-icons/io";
import { IoIosArrowBack } from "react-icons/io";
import { IoIosArrowUp } from "react-icons/io";
import { IoIosArrowDown } from "react-icons/io";

const Links = ({ isToggleActive }) => {
  const [heading, setHeading] = useState("");
  const [subHeading, setSubHeading] = useState("");
  console.log("toggle", heading, subHeading);

  useEffect(() => {
    setHeading("");
    setSubHeading("");
  }, [isToggleActive]);

  return (
    <>
      {isToggleActive && (
        <div className="h-3/5 w-4/5 m-auto flex text-gray-800 relative top:0 shadow-lg pb-20 sm:pb-0 text-sm flex-col w-full items-left transition duration-1000 ease-out sm:pl-0 sm:h-[30px] sm:flex-row sm:items-center sm:justify-around">
          {links.map((link) => (
            <div>
              <div
                className={
                  heading === link.name
                    ? "bg-gray-200 font-semibold text-[16px] text-left md:cursor-pointer group z-100 border-t-2 pl-7 border-gray-100 rounded-sm"
                    : "text-left text-[16px] md:cursor-pointer group z-100 border-t-2 pl-7 border-gray-100 rounded-sm"
                }
              >
                <p
                  onClick={() => {
                    heading !== link.name
                      ? setHeading(link.name)
                      : setHeading("");
                    setSubHeading("");
                  }}
                  className={
                    heading === link.name
                      ? "text-black-600 py-2 text-[14px] flex cursor-pointer hover:text-red-400 justify-between items-center md:pr-0 group"
                      : "py-2 flex cursor-pointer justify-between items-center md:pr-0 group"
                  }
                >
                  {link.name}
                  {heading === link.name ? (
                    <IoIosArrowUp />
                  ) : (
                    <IoIosArrowDown />
                  )}
                </p>
                {link.subMenu && (
                  <div className="">
                    <div className="absolute w-[140px] top-3 hidden group group-hover:md:block hover:md:block">
                      {/* <div className="py-1">
                        <div
                          className="w-4 h-4 left-3 absolute 
                    mt-1 bg-white border-t-2 border-l-2 border-gray-400 rotate-45"
                        ></div>
                      </div> */}
                      <div className=" border-solid relative mt-[20px] -ml-[18px] shadow-md group-hover:md:block hover:md:block bg-white z-100 pl-1 flex flex-col items-center">
                        {link.sublinks.map((mysublinks) => (
                          <div className="group">
                            <p
                              onMouseEnter={() => {
                                subHeading !== mysublinks.Head
                                  ? setSubHeading(mysublinks.Head)
                                  : setSubHeading("");
                              }}
                              onMouseLeave={() => setSubHeading("")}
                              className="text-lg text-[14px] relative text-black my-1 hover:text-red-400 flex justify-between items-center"
                            >
                              {mysublinks.Head}
                              {subHeading === mysublinks.Head ? (
                                <IoIosArrowBack />
                              ) : (
                                <IoIosArrowForward />
                              )}
                              <div
                                className={
                                  subHeading === mysublinks.Head
                                    ? "block absolute last-left-0 left-full shadow-md top-0 px-2 w-[220px] bg-white"
                                    : "hidden"
                                }
                              >
                                {mysublinks.sublink.map((slink) => (
                                  <p className="text-sm text-[12px] text-gray-600 hover:text-red-400 my-2">
                                    {slink.name}
                                  </p>
                                ))}
                              </div>
                            </p>
                          </div>
                        ))}
                      </div>
                    </div>
                  </div>
                )}
              </div>
              {/* Mobile menus */}
              <div
                className={`
            ${heading === link.name ? "sm:hidden " : "hidden"}
          `}
              >
                {/* sublinks */}
                {link.sublinks.map((slinks) => (
                  <div>
                    <div className="">
                      <p
                        onClick={() =>
                          subHeading !== slinks.Head
                            ? setSubHeading(slinks.Head)
                            : setSubHeading("")
                        }
                        className={
                          subHeading === slinks.Head
                            ? "bg-gray-100 py-2 pl-2 font-semibold border-gray-200 border-b-2 cursor-pointer w-10/12 hover:text-red-600 m-auto justify-between flex items-center md:pr-0 pr-5"
                            : "bg-gray-100 py-2 pl-2 border-gray-200 border-b-2 cursor-pointer w-10/12 hover:text-red-600 m-auto justify-between font-normal flex items-center md:pr-0 pr-5"
                        }
                      >
                        {slinks.Head}
                        {subHeading === slinks.Head ? (
                          <IoIosArrowUp />
                        ) : (
                          <IoIosArrowDown />
                        )}
                      </p>
                      <div
                        className={`${
                          subHeading === slinks.Head ? "md:hidden" : "hidden"
                        }`}
                      >
                        {slinks.sublink.map((slink) => (
                          <p className="border-t-2 border-gray-100 py-2 pl-16 w-4/5 m-auto cursor-pointer hover:text-red-600">
                            {slink.link}
                            {slink.name}
                          </p>
                        ))}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      )}
    </>
  );
};

export default Links;
